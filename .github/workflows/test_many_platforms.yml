name: 'Many platforms'

on:
  workflow_dispatch:
    inputs:
      branch:
        type: choice
        description: ncrystaldev branch
        required: true
        options:
        - main
        - develop
  schedule:
    - cron: '30 13 * * *'  # 13:30 every day
#    - cron: '30 23 * * 0'  # 23:30 every Sunday

jobs:
  run-tests:
    name: ${{ matrix.os }}.${{ matrix.CC }}.python-${{ matrix.python }}.dgcode-${{ matrix.build-flag }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Very short while testing
          - { os: ubuntu-20.04, CC: clang-10, CXX: clang++-10, python: '3.9', build-flag: release }

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    env:
      SHELL: /bin/bash
      CC: ${{ matrix.CC }}
      CXX: ${{ matrix.CXX }}
      PROJECTS_DIR: projects

    steps:
      - name: Checkout dgcode_actions
        uses: actions/checkout@v3
        with:
          repository: mctools/dgcode_actions

      - name: Clone ncrystaldev
        run: |
          git clone https://oauth2:${{ secrets.NCRYSTALDEV_GITLAB_TOKEN }}@${{ secrets.NCRYSTALDEV_GITLAB_URL }} --branch ${{ github.event.inputs.branch || 'main' }} --single-branch --depth=1 $GITHUB_WORKSPACE/ncrystaldev_projects

      - name: Setup framework action
        id: setup-framework
        uses: ./.github/actions/setup
        with:
          PYTHON_VERSION: ${{ matrix.python }}
          PROJECTS_DIR: ${{ env.PROJECTS_DIR }}
          DGBUILD_FLAG: ${{ matrix.build-flag }}
          INSTALL_GEANT4: ${{ matrix.os !='ubuntu-22.04' }} #temp solution until Geant4 update

      - name: Build dgcode::framework
        run: |
          . $GITHUB_WORKSPACE/dgdepfixerInstall/setup.sh
          export DGCODE_EXTRA_PKG_PATH="$GITHUB_WORKSPACE/ncrystaldev_projects/"
          . bootstrap.sh
          dgbuild ONLY='Framework::*' --${{ matrix.build-flag }}
        working-directory: ${{ env.PROJECTS_DIR }}
        env:
          DGDEP_IGNOREBADSHEBANG: 1

      - name: Build dgcode::ncrystaldev
        run: |
          . $GITHUB_WORKSPACE/dgdepfixerInstall/setup.sh
          export DGCODE_EXTRA_PKG_PATH="$GITHUB_WORKSPACE/ncrystaldev_projects/"
          . bootstrap.sh
          dgbuild ONLY='*' NOT=NCLongTests --${{ matrix.build-flag }}
        working-directory: ${{ env.PROJECTS_DIR }}
        env:
          DGDEP_IGNOREBADSHEBANG: 1

      - name: Run dgcode tests
        run: |
          . $GITHUB_WORKSPACE/dgdepfixerInstall/setup.sh
          export DGCODE_EXTRA_PKG_PATH="$GITHUB_WORKSPACE/ncrystaldev_projects/"
          . bootstrap.sh
          dgbuild -t --${{ matrix.build-flag }} --testexcerpts=50
        working-directory: ${{ env.PROJECTS_DIR }}
        env:
          DGDEP_IGNOREBADSHEBANG: 1

      - name: Rename test result
        id: rename-test-result
        if: always() && steps.setup-framework.outcome == 'success'
        run: mv $GITHUB_WORKSPACE/${{ env.PROJECTS_DIR }}/.bld/testresults/dgtest_results_junitformat.xml $GITHUB_WORKSPACE/${{ env.PROJECTS_DIR }}/.bld/testresults/dgtest_results_junitformat_${{ matrix.os }}.${{ matrix.CC }}.python-${{ matrix.python }}.dgcode-${{ matrix.build-flag }}.xml

      - uses: actions/upload-artifact@v3  # upload test results
        if: always() && steps.rename-test-result.outcome == 'success'
        with:
          name: test-results
          path: ${{ github.workspace }}/${{ env.PROJECTS_DIR }}/.bld/testresults/dgtest_results_junitformat_${{ matrix.os }}.${{ matrix.CC }}.python-${{ matrix.python }}.dgcode-${{ matrix.build-flag }}.xml

  report:
    name: Creating test report
    if: always()
    needs: run-tests
    runs-on: ubuntu-latest
    steps:

    - name: Download a single artifact
      uses: actions/download-artifact@v3
      with:
        name: test-results
        path: artifact_dir

    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action/composite@v2
      if: always()
      with:
        check_name: Test Report
        junit_files: artifact_dir/dgtest_results_junitformat*.xml
        report_individual_runs: "true"
        comment_mode: "off" #control pull request comments
